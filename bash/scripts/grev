#!/bin/sh -u

BASE_DIR=$(cd $(dirname "$0") && pwd -P)
SCRIPT_NAME=$(basename "$0")

fail() {
	echo "$@"
	exit 1
}

usage() {
        cat <<EOI
usage: $SCRIPT_NAME [ARGS] TICKET_NUM

Checks out a git branch based on a "\$initials/\$ticket/\$description" branch naming convention.

ARGS:
  -f, --fetch     run "git fetch" first
  -d, --delete    delete existing branch first
  -h, --help      print this information and exit
EOI
        return 1
    }
[ $# -eq 0 ] && {
    usage
    exit 1
}

fetch=0
delete=0
ticket=

while [ $# -gt 0 ]; do
    arg="$1"
    shift
    case "$arg" in 
        --fetch|-f)
            fetch=1
            ;;
        --delete|-d)
            delete=1
            ;;
        --help|-h)
            usage
            exit 0
            ;;
        --fd|-df)
            fetch=1
            delete=1
            exit
            ;;
        *)
            [ -z "$ticket" ] || {
                fail "Ticket $ticket already specified"
            }
            ticket="$arg"
            ;;
    esac
done

# sanity checks!
[ -n "$ticket" ] || {
    usage
    fail "No ticket specified"
}
( echo "$ticket" | grep -qe '^[0-9]\+$' ) || {
    usage
    fail "Invalid ticket: $ticket"
}
# we're in a git repo, right?
cur_branch=$(git rev-parse --abbrev-ref HEAD) \
    || fail "No git repo found?"

# make sure we find the branch requested -- and only one
branches=$(git branch -a | grep "remotes/origin/[^/]\+/$ticket/")\
    || fail "Failed to locate a branch for ticket $ticket"
[ $(echo "$branches" | wc -l) -eq 1 ] \
    || fail "Multiple remote branches found:\n\n$branches"
# and parse out the branch name
branch=${branches##*origin/}

# fetch/delete first, as requested
[ $fetch -eq 1 ] && git fetch origin $branch
[ $delete -eq 1 ] && git branch -D "$branch"

# do the deed, if needed -- might already be on this branch
[ $delete -eq 0 -a "$branch" == "$cur_branch" ] || {
    git checkout "$branch" || fail "Failed to change git branch"
}

# if we didn't fetch up front, do a quiet background fetch now
[ $fetch -eq 0 ] && {
    git fetch origin $branch &>/dev/null &
    disown -r
}
